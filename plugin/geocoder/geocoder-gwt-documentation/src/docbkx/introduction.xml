<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2015 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-introduction">
  <title>Introduction</title>

	<para>The geocoder plugin provides a standard mechanism to convert text,
		representing an address or point of interest, in a map location.</para>

	<para>For this purpose a command "command.geocoder.GetLocationForString" is
		provided which allows you to do the conversion.</para>

	<para>This input string is converted to a bounding box which is intended to
		be zoomed to. A marker may be displayed at the center of that area.</para>

	<para>For users of the client GWT, a widget is provided to allow users to type
		the string and which changes the view to the matching area. When the string
		is ambiguous, the user will be presented with some alternate locations to
		choose from.</para>

	<para>The actual conversion is done using a pluggable list of geocoder
		service. Some standard implementations are provided. Either the first
		services which produces a match wins, or the results may be combined.</para>

	<section id="how">
		<title>How does it work?</title>

		<para>The GetLocationForStringCommand class handles a request to get a
			location for a string.</para>

		<figure>
			<title>GetLocationForStringCommand overview</title>

			<mediaobject>
				<imageobject>
					<imagedata fileref="images/command.png" width="100%" />
				</imageobject>
			</mediaobject>
		</figure>

		<para>This string is first cut into relevant parts, for example "London,
			UK" may be split into parts "London" and "UK". This is handled by the
			SplitGeocoderStringService. The default implementation uses comma as
			separator and removes whitespace between the parts.</para>

		<para>After that, each of the configured GeocoderServices is given a
			chance to convert the strings into a list of locations. If the geocoder
			service returns one location, it is considered
			<emphasis>matched</emphasis>. When it returns multiple locations, the
			search term is considered ambiguous and the locations are considered as
			alternatives. You can configure whether all geocoders need to be given a
			chance to find the location or whether it should stop as soon as one
			service has returned at least one location.</para>

		<para>The geocoder services can return either an area (bounding box) or a
			point. When they returned a point, this is extended to an area centered
			around that point.</para>

		<para>At the end, the result is prepared for return. The matching
			locations are combined using the configured CombineResultService. The
			default implementation uses the union of the area. When there were no
			matches, then all alternatives are returned.</para>

		<para>The location also contains the canonical search string.</para>
	</section>
</chapter>
