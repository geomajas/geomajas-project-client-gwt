<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-gwt">
  <title>Client GWT extensions</title>

  <para>The plugin contains a module which provides some widgets for the client GWT
  and which allows automatic handling of login using the staticsecurity
  login window.</para>

  <section id="gwt-dependencies">
    <title>Dependencies</title>

    <para>When using the client GWT extensions, you should depend on the module
    which provides these. This dependency automatically includes all necessary
    source code for GWT compilation and the core staticsecurity module.</para>

    <informalexample>
      <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-staticsecurity-gwt&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
    </informalexample>

    <para>This assumes you are using either geomajas-dep or that you important
    the staticsecurity-all pom in your dependencyManagement section as
    discussed in <link linkend="dependencies">section <xref
    linkend="dependencies" /></link>.</para>
  </section>

  <section>
    <title>Using the client GWT widgets</title>

    <para>To make sure the widgets can be used in your GWT client code, you
    have to inherit the module in you .gwt.xml file.</para>

    <xi:include href="listing/GwtXml.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>You can now configure to use the staticsecurity token request
    handler. This will assure that credentials are asked when the current
    token is either invalid or when a security exception occurs if no token
    was available.</para>

    <xi:include href="listing/TokenRequestHandler.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <section>
      <title>TokenRequestWindow</title>

      <para>The token request window allows your users to login to the
      application. There are two fields to enter the login and password and a
      login and reset button. When the users enters his or her credentials,
      the user is logged in. When a problem occurs, this is displayed.</para>

      <para>The window can display a custom message. This can be passed in the
      constructor. The SsecLayout class can be used to customize the layout
      and look (for example the logo).</para>

      <figure>
        <title>Token request window</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/tokenRequestWindow.png" width="70%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>TokenReleaseButton</title>

      <para>The token release button allows the user to logout by pressing the
      button. This will contact the server to immediately invalidate the
      current token, thus logging the user out. When the application requires
      you to login, new credentials will be asked the next time the server is
      contacted. The button listens to the token changed events to control its
      state, disabling it when no token is available and enabling it after
      login.</para>
    </section>
  </section>
</chapter>
