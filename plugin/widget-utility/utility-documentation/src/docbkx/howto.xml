<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2014 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-howto">
  <title>How-to</title>

  <sect1>
    <title>Configuring a custom RibbonColumn widget</title>

    <para>The basic element within a Ribbon, is the RibbonColumn interface.
    All buttons and other widgets within the Ribbon groups must implement this
    interface. By default only 2 types have been implemented: a single big
    button (type = "ActionButton") and a vertical list of action buttons (type
    = "ActionList").</para>

    <para>This section describes how to expand this list with your own custom
    types. In order to accomplish this, the following steps need to be
    taken:</para>

    <orderedlist>
      <listitem>
        <para>Create a new RibbonColumn implementation. This class will be the
        widget we want to be used within the Ribbon.</para>
      </listitem>

      <listitem>
        <para>Register this custom RibbonColumn implementation, using a
        specific key.</para>
      </listitem>

      <listitem>
        <para>Use this key in the backend Spring configuration.</para>
      </listitem>
    </orderedlist>

    <note>
      <para>Note that this section assumes that you want your custom type to
      be used through configuration. If you assemble your Ribbon without
      configuration (but by using Java code only), then there is no need to
      register your type.</para>
    </note>

    <para>In the sections below, we will create a custom RibbonColumn that
    displays the lon-lat position of the mouse pointer on the map.</para>

    <sect2>
      <title>Create a custom RibbonColumn implementation</title>

      <para>In this example we will implement a custom widget that displays
      lon-lat coordinates of the mouse pointer on the map. The code could look
      like this:</para>

      <example>
        <title>Custom RibbonColumn implementation</title>

        <programlisting>public class MyCustomRibbonColumn extends VLayout implements RibbonColumn {

	private Label xLabel;
	private Label yLabel;
	private Listener listener;
	private MapWidget mapWidget;
	private String xText = "X";
	private String yText = "Y";

	public MyCustomRibbonColumn(MapWidget mapWidget) {
		super(8);
		this.mapWidget = mapWidget;

		xLabel = new Label(xText + ":");
		xLabel.setSize("80px", "16px");
		addMember(xLabel);

		yLabel = new Label(yText + ":");
		yLabel.setSize("80px", "16px");
		addMember(yLabel);

		listener = new MyMapListener();
		mapWidget.addListener(listener);
	}

	public Widget asWidget() {
		return this;
	}

	public void setShowTitles(boolean showTitles) {
	}

	public boolean isShowTitles() {
		return false;
	}

	public void setTitleAlignment(TitleAlignment titleAlignment) {
	}

	public TitleAlignment getTitleAlignment() {
		return TitleAlignment.BOTTOM;
	}

	public void setButtonBaseStyle(String buttonBaseStyle) {
	}

	/**
	 * Can accept "X and "Y" text values to be printed out.
	 */
	public void configure(String key, String value) {
		if ("x".equalsIgnoreCase(key)) {
			xText = value;
		} else if ("y".equalsIgnoreCase(key)) {
			yText = value;
		}
	}

	// ------------------------------------------------------------------------
	// SmartGWT methods overrides:
	// ------------------------------------------------------------------------

	@Override
	protected void onDestroy() {
		mapWidget.removeListener(listener);
		super.onDestroy();
	}

	// ------------------------------------------------------------------------
	// Private classes:
	// ------------------------------------------------------------------------

	/**
	 * Private map listener that gets the world position of the mouse pointer and prints it out.
	 * 
	 * @author Pieter De Graef
	 */
	private class MyMapListener implements Listener {

		public void onMouseDown(ListenerEvent event) {
		}

		public void onMouseUp(ListenerEvent event) {
		}

		public void onMouseMove(ListenerEvent event) {
			Coordinate worldPosition = event.getWorldPosition();
			double x = ((double) Math.round(worldPosition.getX() * 1000)) / 1000;
			double y = ((double) Math.round(worldPosition.getY() * 1000)) / 1000;
			xLabel.setContents(xText + ": " + x);
			yLabel.setContents(yText + ": " + y);
		}

		public void onMouseOut(ListenerEvent event) {
		}

		public void onMouseOver(ListenerEvent event) {
		}

		public void onMouseWheel(ListenerEvent event) {
		}
	}
}</programlisting>
      </example>

      <para>This piece of code implements the RibbonColumn interface, and
      extends the SmartGWT VLayout class. It is therefore a widget that can be
      used as part of a Ribbon. During construction, it registers a custom
      Listener (MyMapListener) on the map, which extracts the mouse pointer
      location and updates the label text to display that position.</para>

      <para>The most important method within this class is the "configure"
      method. This method determines which parameters this particular
      RibbonColumn supports. In this case, a "X" and "Y" parameter can be set
      to be displayed on the labels. Later in the backend Spring
      configuration, we will use the "X" and "Y" parameters to configure this
      widget.</para>
    </sect2>

    <sect2>
      <title>Register your custom RibbonColumn</title>

      <para>In order to be able to use your custom RibbonColumn implementation
      in the backend Spring configuration, you have to register the class with
      a unique key. This key can then be used in the configuration to create
      instances of of your custom type. The following piece of Java code,
      registers our custom widget on the GWT client:</para>

      <example>
        <title>Registering your custom class</title>

        <programlisting>RibbonColumnRegistry.put("<emphasis role="bold">MyCustomColumn</emphasis>", new RibbonColumnCreator() {

	public RibbonColumn create(List&lt;ClientToolInfo&gt; tools, MapWidget mapWidget) {
		return new MyCustomRibbonColumn(mapWidget);
	}
});</programlisting>
      </example>

      <para>The above piece of code actually registers a new
      RibbonColumnCreator in the RibbonColumnRegistry. This creator will
      create new instances of the MyCustomRibbonColumn class when required.
      Note that we don't use the tools here - so no use configuring them for
      this type.</para>

      <para>What's important here is the key that is used. In this case the
      key "MyCustomColumn" is used. This same key can now be used in the
      backend Spring configuration.</para>
    </sect2>

    <sect2>
      <title>Using the custom type in the configuration</title>

      <para>Now that we have a custom RibbonColumn implementation and it has
      been registered with the key "MyCustomColumn", it is time to actually
      use it in the backend Spring configuration. An example configuration for
      the Ribbon column could look like this:</para>

      <example>
        <title>Custom type in configuration</title>

        <programlisting>...
&lt;bean class="org.geomajas.widget.utility.configuration.RibbonColumnInfo"&gt;
	&lt;property name="type" value="<emphasis role="bold">MyCustomColumn</emphasis>" /&gt;
	&lt;property name="tools"&gt;
		&lt;list&gt;
		&lt;/list&gt;
	&lt;/property&gt;
	&lt;property name="parameters"&gt;
		&lt;list&gt;
			&lt;bean class="org.geomajas.configuration.Parameter"&gt;
				&lt;property name="name" value="x" /&gt;
				&lt;property name="value" value="lon" /&gt;
			&lt;/bean&gt;
			&lt;bean class="org.geomajas.configuration.Parameter"&gt;
				&lt;property name="name" value="y" /&gt;
				&lt;property name="value" value="lat" /&gt;
			&lt;/bean&gt;
		&lt;/list&gt;
	&lt;/property&gt;
&lt;/bean&gt;
...</programlisting>
      </example>

      <para>The above configuration sample shows how to use the custom type
      "MyCustomColumn" within the XML configuration. Note that the list of
      tools is empty, as our registered RibbonColumnCreator does not use them
      anyway. Instead, we now see a list of parameters. Remember that when we
      defined our custom RibbonColumn implementation, there was support for 2
      configuration parameters in the "configure" method, namely "X" and "Y".
      Now in our configuration, we can use those 2 parameters to attach a
      value to them ("lon" and "lat").</para>

      <para>The custom widget used those 2 parameters to be displayed on the
      labels. See below for a screenshot of our custom type:</para>

      <screenshot>
        <screeninfo>Custom RibbonColumn</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/custom-ribbon.png" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </sect2>
  </sect1>

  <sect1>
    <title>Defining a custom Ribbon style</title>

    <para>In the configuration chapter it was mentioned that this plug-in
    defines extensions for the default SmartGWT themes specifically tailored
    for the widgets it provides. This means that new CSS classes have been
    defined for the widgets. This section will show how to override the
    default styles or how to create a new custom style for the Ribbon
    widget.</para>

    <sect2>
      <title>Overriding the default theme</title>

      <para>By default, the themes used are the following:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>ribbon</emphasis>: The outer Ribbon bar. Typically
          defines border and background for the entire Ribbon bar.</para>
        </listitem>

        <listitem>
          <para><emphasis>ribbonGroup</emphasis>: Style for a Ribbon group.
          Typically defines border and background colors for each
          group.</para>
        </listitem>

        <listitem>
          <para><emphasis>ribbonGroupBody</emphasis>: Style for the upper part
          of a Ribbon group (where the buttons are). Typically defines
          padding, spacing, ...</para>
        </listitem>

        <listitem>
          <para><emphasis>ribbonGroupTitle</emphasis>: Style for the group
          titles. Typically defines the type of font used for the
          titles.</para>
        </listitem>

        <listitem>
          <para><emphasis>ribbonButton</emphasis>: Base style for the buttons
          within the Ribbon bar. Since the buttons follow the SmartGWT way of
          working, there are extra styles for hovering, selection,
          disabled.... (ribbonButton, ribbonButtonOver, ribbonButtonFocused,
          ribbonButtonFocusedOver, ribbonButtonDown, ribbonButtonFocusedDown,
          ribbonButtonSelected, ribbonButtonSelectedFocused,
          ribbonButtonSelectedDown, ribbonButtonSelectedFocusedDown,
          ribbonButtonSelectedOver, ribbonButtonSelectedFocusedOver,
          ribbonButtonDisabled, ribbonButtonSelectedDisabled)</para>
        </listitem>
      </itemizedlist>

      <para>By overriding these CSS classes can you override the default style
      for the ribbon.</para>
    </sect2>

    <sect2>
      <title>Creating a custom style</title>

      <para>Alternatively you can create an extra ribbon style to be used in
      conjunction with the default style. In this case none of the default
      styles will be overridden, and for each Ribbon widget that you use, you
      can choose which style to apply. All you have to do is come up with a
      base name for the new ribbon style, and replace the "ribbon" part in all
      CSS classes with your new name.</para>

      <para>For example, lets create a Ribbon style with the name "myRibbon".
      The CSS classes within the Ribbon would then be: myRibbon,
      myRibbonGroup, myRibbonGroupBody, myRibbonGroupTitle,
      myRibbonButton.</para>

      <para>In the client Java code, you then have to apply this new style on
      the Ribbon as follows:</para>

      <example>
        <title>Applying a custom style</title>

        <programlisting>RibbonBarLayout ribbon = new RibbonBarLayout(mapWidget, "ribbon-bar-1");
ribbon.setStyleName("myRibbon");</programlisting>
      </example>

      <para>Below is a CSS extract that defines the "myRibbon" style for the
      Ribbon widget:</para>

      <example>
        <title>Defining the myRibbon style</title>

        <programlisting>.myRibbon {
	padding: 2px;
    background: #E0E0F8;
    background-image: -moz-linear-gradient(top, #D8D8F0, #E8E8FF);
    background-image: -webkit-gradient(linear, left top, left bottom, from(#D8D8F0), to(#E8E8FF));
    border: 1px solid #A7ABD4;
}

.myRibbonGroup {
	border-right: 1px solid #A7ABB4;
	height: 100%;
}

.myRibbonGroupBody {
	padding: 3px 5px;
}

.myRibbonGroupTitle {
	font-family: Arial,Verdana,sans-serif;
	font-size: 11px;
	font-weight: bold;
	color: #555599;
	padding: 1px 5px;
	white-space: nowrap;
}

.myRibbonButton,
.myRibbonButtonOver,
.myRibbonButtonFocused,
.myRibbonButtonFocusedOver,
.myRibbonButtonDown,
.myRibbonButtonFocusedDown,
.myRibbonButtonSelected,
.myRibbonButtonSelectedFocused,
.myRibbonButtonSelectedDown,
.myRibbonButtonSelectedFocusedDown,
.myRibbonButtonSelectedOver,
.myRibbonButtonSelectedFocusedOver,
.myRibbonButtonDisabled,
.myRibbonButtonSelectedDisabled {
	padding: 2px 1px;
	font-family: Arial,Verdana,Bitstream Vera Sans,sans-serif;
	font-size: 11px;
	color: #000000;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border: 1px solid transparent;
}

.myRibbonButtonDisabled,
.myRibbonButtonSelectedDisabled {
	font-weight: normal;
	color: #AAAAAA;
}

.myRibbonButtonFocused,
.myRibbonButtonFocusedOver,
.myRibbonButtonSelectedFocused,
.myRibbonButtonSelectedFocusedOver,
.myRibbonButtonSelectedFocusedDown {
	border-left: 1px solid #B2D3FC;
	border-right: 1px solid #AACBF6;
	border-top: 1px solid #B2D3FC;
	border-bottom: 1px solid #AACBF6;
}

.myRibbonButtonOver,
.myRibbonButtonFocusedOver,
.myRibbonButtonSelectedFocused,
.myRibbonButtonSelectedFocusedOver,
.myRibbonButtonSelectedOver {
	border-left: 1px solid #999999;
	border-right: 1px solid #666666;
	border-top: 1px solid #999999;
	border-bottom: 1px solid #666666;
}

.myRibbonButtonDown,
.myRibbonButtonFocusedDown,
.myRibbonButtonSelectedDown,
.myRibbonButtonSelectedFocusedDown {
    background: #FFDDBE;
	border-left: 1px solid #b8cfef;
	border-right: 1px solid #b8cfef;
	border-top: 1px solid #87B6EC;
	border-bottom: 1px solid #75AEEC;
}

.myRibbonButtonSelected,
.myRibbonButtonSelectedFocused,
.myRibbonButtonSelectedFocusedOver,
.myRibbonButtonSelectedDisabled,
.myRibbonButtonSelectedOver {
    background: #FFD7B2;
}</programlisting>
      </example>
    </sect2>
  </sect1>
</chapter>
